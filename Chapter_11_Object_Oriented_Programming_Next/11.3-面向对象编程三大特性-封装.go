package main

import (
	"fmt"
)

/*
11.3.2 封装介绍
封装就是把抽象出的字段和对字段的操作封装在一起，数据被保护在内部，程序的其它包只有通过被授权的操作(方法)才能对字段就行操作

11.3.3 封装的理解和好处
(1)隐藏实现细节
(2)可以对数据进行验证，保证安全合理

11.3.4 如何体现封装
(1)对结构体的属性进行封装
(2)通过方法、包实现封装

11.3.5 封装的实现步骤
(1)将结构体、字段(属性)的首字母小写(不能导出，其它包不能使用,类似于private)
(2)给结构体所在包提供一个工厂模式的函数，首字母大写，类似于一个构造函数
(3)提供一个首字母大写的Set方法(类似于其它语言的public),用于对属性判断并赋值
func (var 结构体类型名)SetXxx(参数列表)(返回值列表){
	//加入数据验证的业务逻辑
	var.字段=参数
}
(4)提供一个首字母大写的Get方法(类似于其它语言的public),用于获取属性的值
func (var 结构体类型名)GetXxx(){
	return var.age;
}

11.3.6 快速入门案例



11.3.7 课堂练习
要求:
(1)创建程序，在model包中定义Account结构体;在main函数中体会Golang的封装性
(2)Account结构体要求具有字段：账号(长度在6-10之间)、余额(必须>20)、密码(必须是六)
(3)通过SetXxx的方法给Account的字段赋值
(4)在main函数中测试
*/
func main(){
	fmt.Println(``)
}



